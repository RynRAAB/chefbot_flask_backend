from flask import Blueprint, request, jsonify
from src.main import app, client, db
from src.models import Conversation
import json
from src.models import User, Conversation, AccountPersonnalisation  # Ajout de AccountPersonnalisation


# Fonction pour d√©terminer si une question concerne la cuisine
def est_question_cuisine(user_input):
    """
    V√©rifie si une question ou un message concerne la cuisine.

    √âtapes :
    1. Envoie le message de l'utilisateur √† l'API OpenAI pour classification.
    2. L'API r√©pond par 'OUI' si la question concerne la cuisine, sinon 'NON'.
    3. Analyse la r√©ponse pour d√©terminer si elle contient 'OUI'.

    Arguments :
    - user_input (str) : Le message ou la question de l'utilisateur.

    Retourne :
    - bool : True si la question concerne la cuisine, False sinon.
    """
    # Appel √† l'API OpenAI pour classifier la question
    response = client.chat.completions.create(
        model="gpt-4o-mini",  # Mod√®le utilis√© pour la classification
        messages=[
            {
                "role": "system",
                "content": (
                    "Tu es un classificateur de questions. Pour chaque question, r√©ponds uniquement par 'OUI' "
                    "si la question concerne la cuisine (cuisine, ingr√©dients, etc...), ou par 'NON' dans le cas contraire. Ne donne aucune explication."
                )
            },
            {"role": "user", "content": user_input}  # Message de l'utilisateur √† classifier
        ]
    )
    # Extraire la classification et v√©rifier si elle contient "OUI"
    classification = response.choices[0].message.content.strip().upper()
    return "OUI" in classification




def get_user_personalization(username):
    """
    R√©cup√®re les pr√©f√©rences culinaires d'un utilisateur et g√©n√®re un prompt personnalis√© pour le chatbot.
    
    Cette fonction interroge la base de donn√©es pour obtenir les informations de personnalisation
    (r√©gime alimentaire, allergies, √©quipement disponible, etc.) et les formate dans un prompt
    clair pour guider les r√©ponses du chatbot.

    Args:
        username (str): L'email de l'utilisateur (User.username)

    Returns:
        str: Un message syst√®me personnalis√© contenant :
             - Une base fixe ("Tu es un expert en cuisine...")
             - Les pr√©f√©rences sp√©cifiques de l'utilisateur format√©es en bullet points
             - Retourne le message de base si aucune personnalisation n'est trouv√©e

    Exemple de retour:
        "Tu es un expert en cuisine...\n- R√©gime: V√©g√©tarien\n- Allergies: Arachides..."
    """

    # 1. Trouver l'utilisateur par son email
    user = User.query.filter_by(username=username).first()

    if not user:
        print(f"‚ùå Utilisateur {username} introuvable")
        return "Tu es un expert en cuisine..."

    # 2. Maintenant utiliser user.id pour la personnalisation
    personalization = AccountPersonnalisation.query.filter_by(user_id=user.id).first()
    print(personalization);
       
    
    # Retourne le message par d√©faut si aucune personnalisation n'existe
    if not personalization:
        return "Tu es un expert en cuisine. Tu ne r√©ponds qu'aux questions sur la cuisine."
    
    # Base du prompt syst√®me
    system_prompt = "Tu es un expert en cuisine. Tu ne r√©ponds qu'aux questions sur la cuisine en tenant compte des pr√©f√©rences suivantes:\n"
    
    # Ajout du r√©gime alimentaire si sp√©cifi√© (et diff√©rent de la valeur par d√©faut)
    if personalization.diet and personalization.diet != "Aucun r√©gime":
        system_prompt += f"- R√©gime alimentaire: {personalization.diet}\n"
    
    # Ajout de l'objectif alimentaire si sp√©cifi√©
    if personalization.food_goal and personalization.food_goal != "Aucun objectif":
        system_prompt += f"- Objectif alimentaire: {personalization.food_goal}\n"
    
    # Ajout des allergies si renseign√©es (cha√Æne non vide)
    if personalization.allergies:
        system_prompt += f"- Allergies: {personalization.allergies}\n"
    
    # Ajout des ingr√©dients √† √©viter si renseign√©s
    if personalization.banned_ingredients:
        system_prompt += f"- Ingr√©dients √† √©viter: {personalization.banned_ingredients}\n"
    
    # Ajout de l'√©quipement de cuisine disponible
    if personalization.kitchen_equipment:
        system_prompt += f"- √âquipement disponible: {personalization.kitchen_equipment}\n"
    
    print(system_prompt)
    return system_prompt



def reduce_conversation_history(history):
    """
    R√©duit l'historique de conversation √† 10 messages maximum en conservant :
    - Le message syst√®me (toujours en premi√®re position)
    - Les 9 derniers √©changes (user/assistant)
    
    Args:
        history (list): Liste compl√®te des messages de la conversation
        
    Returns:
        list: Historique tronqu√© √† 10 messages max
    """
    if len(history) <= 10:
        return history
    
    # Garde le message syst√®me (premier √©l√©ment)
    system_message = history[0]
    
    # Garde les 9 derniers messages (en supposant qu'ils forment des paires user/assistant)
    recent_messages = history[-9:]
    
    # Recombine en gardant le contexte syst√®me
    return [system_message] + recent_messages




# Route Flask pour g√©rer les messages d'une conversation sp√©cifique
@app.route('/chat/<int:conversation_id>', methods=['POST'])
def chat(conversation_id):
    """
    G√®re les messages d'une conversation sp√©cifique avec m√©moire limit√©e √† 10 messages.

    √âtapes :
    1. R√©cup√®re le message utilisateur et valide sa pr√©sence
    2. Charge la conversation depuis la base de donn√©es
    3. Met √† jour le titre si c'est le premier message
    4. Construit l'historique en incluant les personnalisations utilisateur
    5. Limite l'historique √† 10 messages (1 syst√®me + 9 derniers √©changes)
    6. V√©rifie si la question concerne la cuisine
    7. Appelle l'API OpenAI ou retourne une r√©ponse par d√©faut
    8. Sauvegarde l'historique tronqu√© et retourne la r√©ponse

    Args:
        conversation_id (int): ID de la conversation dans la table Conversation

    Request Body (JSON):
        {"message": "texte de l'utilisateur"}

    Returns:
        JSON: {"reply": "r√©ponse du bot"} ou erreur HTTP
    """
    # R√©cup√©rer les donn√©es JSON envoy√©es par le client
    data = request.get_json()
    user_input = data.get('message', '').strip()  # Extraire le message de l'utilisateur

    # V√©rifier si un message a √©t√© fourni
    if not user_input:
        return jsonify({'error': 'Aucun message fourni'}), 400

    # Charger la conversation depuis la base de donn√©es
    conversation = Conversation.query.get(conversation_id)
    if not conversation:
        return jsonify({'error': 'Conversation non trouv√©e'}), 404

    # Charger l'historique des messages (stock√© en JSON dans la base de donn√©es)
    messages = json.loads(conversation.messages) if conversation.messages else []

    # V√©rifier si c'est le premier message de l'utilisateur dans cette conversation
    if not messages or all(msg['role'] == 'system' for msg in messages):
        # Extraire les 5 premiers mots du message pour g√©n√©rer un nouveau titre
        words = user_input.split()[:5]
        new_title = ' '.join(words)
        # Limiter le titre √† 50 caract√®res pour √©viter qu'il soit trop long
        if len(new_title) > 50:
            new_title = new_title[:50] + '...'
        # Mettre √† jour le titre de la conversation dans la base de donn√©es
        conversation.title = new_title
        db.session.commit()

    # Construire l'historique des messages pour l'API OpenAI
    history = [{"role": msg["role"], "content": msg["content"]} for msg in messages]
    
    # Ajouter un message syst√®me si l'historique est vide ou ne contient pas de message syst√®me
    if not history or history[0]["role"] != "system":
         
        #history.insert(0, {"role": "system", "content": "Tu es un expert en cuisine. Tu ne r√©ponds qu'aux questions sur la cuisine."})

        username = conversation.user_id
        #print(username)
        user = User.query.filter_by(username=username).first()
        #print(user)
        user_username = user.username
        system_prompt = get_user_personalization(user_username)
        print(f"System prompt: {system_prompt}")  # Debug: Afficher le message syst√®me
        history.insert(0, {"role": "system", "content": system_prompt})

    

    # Ajouter le message de l'utilisateur √† l'historique
    history.append({"role": "user", "content": user_input})

    # R√©duire l'historique √† 10 messages maximum
    history = reduce_conversation_history(history)
    
    # V√©rifier si la question concerne la cuisine
    if not est_question_cuisine(user_input):
        # R√©ponse par d√©faut si la question ne concerne pas la cuisine
        bot_reply = "Je ne parle que de cuisine ! Pose-moi une question sur les plats, les recettes ou les ingr√©dients. üòä"
    else:
        # Appeler l'API OpenAI avec l'historique complet pour obtenir une r√©ponse
        response = client.chat.completions.create(
            model="gpt-4o-mini",  # Mod√®le utilis√© pour g√©n√©rer la r√©ponse
            messages=history  # Historique des messages √† envoyer √† l'API
        )
        bot_reply = response.choices[0].message.content.strip()  # Extraire la r√©ponse du bot

    # Ajouter la r√©ponse du bot √† l'historique
    history.append({"role": "assistant", "content": bot_reply})

    # Mettre √† jour les messages dans la base de donn√©es
    # Exclut le message syst√®me si n√©cessaire (ici, on exclut le premier message syst√®me)
    conversation.messages = json.dumps(history[1:])
    db.session.commit()

    # Retourner la r√©ponse du bot au client
    return jsonify({'reply': bot_reply})


